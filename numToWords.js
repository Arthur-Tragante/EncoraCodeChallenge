function numToWords(amount) {
  // List of words used in the conversion
  const BASICS = ["", "one ", "two ", "three ", "four ", "five ", "six ", "seven ", "eight ", "nine ", "ten ", "eleven ", "twelve ", "thirteen ", "fourteen ", "fifteen ", "sixteen ", "seventeen ", "eighteen ", "nineteen "];
  const DOZENS = ["twenty", "thirty", "forty", "fifty", "sixty", "seventy", "eighty", "ninety"];
  const SCALES = ["million", "thousand", "hundred"];

  const specialCharacters = /[`!@#$%^&*()_+\-=\[\]{};':"\\|<>\/?~]/;
  let centsToPrint;
  let splitNumber;
  let cents = [];

  if (specialCharacters.test(amount)) return "special characters not allowed"; //Validation for special Character except for dot and comma

  if (amount.indexOf(" ") > -1) return "white spaces not allowed"; //Validation for withe Spaces

  //Checking if the inputed has cents

  if (amount.indexOf(".") > -1) {
    if (amount.toString().length > 10) return "number of characters too long.";
    number = amount.split("."); //breaking  the number in two variables, if the number has cents, to facilitate the construction of the regular expression
    splitNumber = number[0];
    cents = number[1];
    centsToPrint = "dollars and " + cents + "/100"; //Cents concatenation, following the example of the exercise
  } else if (amount.indexOf(",") > -1) {
    if (amount.toString().length > 10) return "number of characters too long.";
    number = amount.split(","); //breaking  the number in two variables, if the number has cents, to facilitate the construction of the regular expression
    splitNumber = number[0];
    cents = number[1];
    centsToPrint = "dollars and " + cents + "/100"; //Cents concatenation, following the example of the exercise
  } else {
    if (amount.toString().length > 7) return "number of characters too long.";
    splitNumber = amount;
    centsToPrint = "dollars"; //if the number doesn't have cents, only the word will be printed instead
  }

  /*
    Regular expression to break the number into an array 
     example:['1234567', '1', '2', '34', '5', '67']
     Each index represents a decimal unit. The index 3 and 5 have two numbers instead of one 
     to facilitate the comparison with the list of words. The first number from the list of DOZENS and the second from the BASICS
     */

  let dollars = ("0000000" + splitNumber).slice(-7).match(/^(\d{1})(\d{1})(\d{2})(\d{1})(\d{2})$/);

  // constants used to represent the index of the array generated by the regular expression of the value inputed by the user

  const MILLION = 1;
  const HUNDREDTHOUSAND = 2;
  const THOUSAND = 3;
  const HUNDRED = 4;
  const DECIMAL = 5;

  //using Map, to generate a new array, with the converted words

  const arrayOfWords = dollars.map((value, index) => {
    switch (index) {
      case MILLION: {
        if (Number(value) !== 0) {
          return `${BASICS[Number(value)]}${SCALES[index - 1]}`;
        }
        break;
      }
      case HUNDREDTHOUSAND: {
        if (Number(value) !== 0) {
          return `${BASICS[Number(value)]}${SCALES[index]}`;
        }
        break;
      }
      case THOUSAND: {
        if (Number(value) < 10 && Number(value) > 0) {
          return `${BASICS[Number(value[1])]}${SCALES[index - 2]}`;
        } else if (Number(value) >= 10 && Number(value) < 20) {
          return `${BASICS[Number(value)]}${SCALES[index - 2]}`;
        } else if (Number(value) > 20) {
          return `${DOZENS[Number(value[0] - 2)]}-${BASICS[Number(value[1])]}${SCALES[index - 2]}`;
        }
        break;
      }
      case HUNDRED: {
        if (Number(value) > 0) {
          return `${BASICS[Number(value)]}${SCALES[index - 2]}`;
        }
        break;
      }
      case DECIMAL: {
        if (Number(value) < 10 && Number(value) !== 0) {
          return `${BASICS[Number(value[1])]}`;
        } else if (Number(value) >= 10 && Number(value) < 20) {
          return `${BASICS[Number(value)]}`;
        } else if (Number(value) > 20) {
          return `${DOZENS[Number(value[0] - 2)]}-${BASICS[Number(value[1])]}`;
        }
        break;
      }
    }
  });

  /*
  The return is a string, from the join of the new array with converted words, 
  Filtering the undefined value (first index) and empty values (if 0) and the cents concatenation
  */
  return arrayOfWords.filter((element) => element != undefined && element !== "").join(" ") + centsToPrint;
}

module.exports = numToWords;
// console.log(numToWords());
